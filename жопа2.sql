--Необходимо предусмотреть:
--- продажу билетов в оба конца 
--- поиск мест на рейс в соответствии с 
--требованиями заказчика
--﻿﻿- получение списка свободных мест на рейс
--- проверка наличия брони по имени клиента и/или названию организации

--На основании описания предметной области необходимо спроектировать
--базу данных и разработать приложение по работе с базой данных.
--Декларативные ограничения реализовать пои создании базы данных. 
--Процедурные ограничения реализовать в виде хранимых процедур, триггеров


CREATE DATABASE TrainReservationSystem;

CREATE TABLE Рейсы (
    Идентификатор_рейса INT IDENTITY(1,1) PRIMARY KEY,
    Номер_рейса VARCHAR(10) NOT NULL,
    Класс VARCHAR(20) NOT NULL,
    Дата_отправления DATETIME NOT NULL,
    Дата_прибытия DATETIME NOT NULL,
    Место_отправления VARCHAR(50) NOT NULL,
    Место_назначения VARCHAR(50) NOT NULL
);

CREATE TABLE Билеты (
    Идентификатор_билета INT IDENTITY(1,1) PRIMARY KEY,
    Идентификатор_рейса INT REFERENCES Рейсы (Идентификатор_рейса),
    Статус VARCHAR(20) NOT NULL,
    Имя_клиента VARCHAR(50) NOT NULL,
    Название_организации VARCHAR(100),
    CONSTRAINT CHK_Статус CHECK (Статус IN ('продан', 'забронирован', 'свободен'))
);

CREATE TABLE Пассажиры (
    Идентификатор_пассажира INT IDENTITY(1,1) PRIMARY KEY,
    Имя_пассажира VARCHAR(50) NOT NULL,
    Дата_покупки_билета DATE NOT NULL,
    Идентификатор_билета INT REFERENCES Билеты (Идентификатор_билета)
);

-- Декларативное ограничение на уникальность номера рейса
ALTER TABLE Рейсы ADD CONSTRAINT unique_номер_рейса UNIQUE (Номер_рейса);

-- Добавление столбца "Забронированные_места" в таблицу "Рейсы"
ALTER TABLE Рейсы
    ADD  Забронированные_места INT DEFAULT 0;

	INSERT INTO Рейсы (Номер_рейса, Класс, Дата_отправления, Дата_прибытия, Место_отправления, Место_назначения, Забронированные_места)
VALUES
    ('R001', 'эконом', '2023-05-01 10:00:00', '2023-05-01 14:00:00', 'Москва', 'Санкт-Петербург', 10),
    ('R002', 'бизнес', '2023-05-02 12:00:00', '2023-05-02 16:00:00', 'Санкт-Петербург', 'Москва', 5),
    ('R003', 'эконом', '2023-05-03 09:00:00', '2023-05-03 13:00:00', 'Москва', 'Ростов-на-Дону', 15),
    ('R004', 'бизнес', '2023-05-04 11:00:00', '2023-05-04 15:00:00', 'Ростов-на-Дону', 'Москва', 8),
    ('R005', 'эконом', '2023-05-05 08:00:00', '2023-05-05 12:00:00', 'Москва', 'Новосибирск', 20),
    ('R006', 'бизнес', '2023-05-06 10:00:00', '2023-05-06 14:00:00', 'Новосибирск', 'Москва', 10);

	-- Создание тестовых данных для таблицы "Билеты"
INSERT INTO Билеты (Идентификатор_рейса, Статус, Имя_клиента, Название_организации)
VALUES
    (1, 'продан', 'Иванов', 'ООО "Альфа"'),
    (2, 'продан', 'Петров', 'ИП Иванов'),
    (3, 'продан', 'Сидоров', 'ООО "Бета"'),
    (4, 'забронирован', 'Смирнов', 'ООО "Гамма"'),
    (5, 'забронирован', 'Козлов', 'ИП Петров'),
    (6, 'продан', 'Новиков', 'ООО "Дельта"');


INSERT INTO Пассажиры (Имя_пассажира, Дата_покупки_билета, Идентификатор_билета)
VALUES
    ('Иван', '2023-05-01', 6),
    ('Петр', '2023-05-02', 7),
    ('Сидор', '2023-05-03', 8),
    ('Александр', '2023-05-04', 9),
    ('Андрей', '2023-05-05', 10),
    ('Михаил', '2023-05-06', 11);

	GO

	CREATE OR ALTER PROCEDURE продажа_билетов_в_оба_конца
    @входной_номер_рейса VARCHAR(10),
    @входной_класс VARCHAR(20),
    @входное_имя_клиента VARCHAR(50),
    @входное_название_организации VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @возвращаемый_идентификатор_билета INT;

    -- Находим рейс по номеру
    SELECT @возвращаемый_идентификатор_билета = Идентификатор_рейса
    FROM Рейсы
    WHERE Номер_рейса = @входной_номер_рейса
    AND Класс = @входной_класс;

    -- Вставляем информацию о билете
    INSERT INTO Билеты (Идентификатор_рейса, Статус, Имя_клиента, Название_организации)
    VALUES (@возвращаемый_идентификатор_билета, 'продан', @входное_имя_клиента, @входное_название_организации);

    -- Обновляем количество забронированных мест на рейсе
    UPDATE Рейсы
    SET Забронированные_места = Забронированные_места + 1
    WHERE Идентификатор_рейса = @возвращаемый_идентификатор_билета;

    SELECT @возвращаемый_идентификатор_билета AS 'возвращаемый_идентификатор_билета';
END;
GO


GO  
EXEC "продажа_билетов_в_оба_конца" 'R001', 'эконом', 'Игорь Петрович', 'ООО "Альфа"';  
GO



GO
CREATE OR ALTER FUNCTION qrr (
    @входной_номер_рейса VARCHAR(10),
    @входной_класс VARCHAR(20)
)
RETURNS @result TABLE(Свободные_места INT)
AS begin 
--declare @result TABLE(Свободные_места INT)
insert into @result
SELECT CAST(COUNT(*) AS INT) AS Свободные_места
    FROM Билеты b
    INNER JOIN Рейсы r ON b.Идентификатор_рейса = r.Идентификатор_рейса
    WHERE r.Номер_рейса = @входной_номер_рейса
        AND r.Класс = @входной_класс
        AND b.Статус = 'свободен'
RETURN 
end
GO


--BEGIN
--SELECT список_свободных_мест_на_рейс @входной_номер_рейса='R001', @входной_класс='эконом'
--END

--GO
--SELECT dbo.qrr(
--               'R001',
--               'эконом');
--GO

--GO  
--declare @входной_номер_рейса VARCHAR(10);  
--declare @входной_класс VARCHAR(20);
--SET @входной_номер_рейса = 'R001'  ;
--SET @входной_класс = 'эконом'  ;
--SELECT список_свободных_мест_на_рейс(@входной_номер_рейса, @входной_класс);
--GO
