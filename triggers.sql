-- Использование базы данных "СистемаУчетаБилетов"
USE СистемаУчетаБилетов;
GO

-- Тригер для гинерации билетов при создании рейса
DROP TRIGGER IF EXISTS trg_ГенерацияБилетов;
GO

CREATE TRIGGER trg_ГенерацияБилетов
    ON Рейсы
    AFTER INSERT
    AS
BEGIN
    -- Получаем информацию о вновь вставленном рейсе
    DECLARE @РейсИдентификатор int;
    DECLARE @АвтобусИдентификатор int;
    DECLARE @КоличествоБилетов int;
    DECLARE @ЦенаБилета int;

    SELECT @РейсИдентификатор = ИдентификаторРейса
    FROM inserted;

    SELECT @АвтобусИдентификатор = ИдентификаторАвтобуса
    FROM inserted;

    SELECT @КоличествоБилетов = КоличествоМест
    FROM Автобусы
    WHERE ИдентификаторАвтобуса = @АвтобусИдентификатор;

    SELECT @ЦенаБилета = ЦенаБилета
    FROM inserted;

    DECLARE @Counter INT
    SET @Counter = 1
    WHILE (@Counter <= @КоличествоБилетов)
        BEGIN
            INSERT INTO Билеты (ИдентификаторРейса, Цена, НомерМеста) VALUES (@РейсИдентификатор, @ЦенаБилета, @Counter)
            SET @Counter = @Counter + 1
        END
END
GO

-- покупка билета
-- При покупке билета проверяем чтобы обратный билет был с теми же городами что и билет туда
DROP TRIGGER IF EXISTS TRG_Покупка_Бронировение_Билеат;
GO

CREATE TRIGGER TRG_Покупка_Бронировение_Билеат
    ON Билеты
    INSTEAD OF UPDATE
    AS
BEGIN
    DECLARE @Пассажир INT;
    DECLARE @Билет INT;
    DECLARE @БилетЗабронирован DATETIME;
    DECLARE @БилетКуплен DATETIME;
    DECLARE @ОбратныйБилет INT;

    SELECT @Пассажир = ИдентификаторПассажира FROM inserted
    SELECT @Билет = ИдентификаторБилета FROM inserted
    SELECT @БилетЗабронирован = ДатаБронирования FROM inserted
    SELECT @БилетКуплен = ДатаПокупки FROM inserted
    SELECT @БилетКуплен = ДатаПокупки FROM inserted
    SELECT @ОбратныйБилет = ИдентификаторОбратныйБилет FROM inserted

    IF ((@БилетЗабронирован IS NOT NULL) OR (@БилетКуплен IS NOT NULL)) AND @Пассажир IS NULL
        BEGIN
            RAISERROR (N'Для билете не указан пассажир', 16, 1)
            ROLLBACK TRANSACTION
            RETURN
        END


    --  ОБновляем бронироваение если билет покупается сразу
    IF (@БилетЗабронирован IS NULL) AND (@БилетКуплен IS NOT NULL)
        SET @БилетЗабронирован = @БилетКуплен

    IF (@ОбратныйБилет IS NOT NULL)
        BEGIN
            DECLARE @БилетГородОтправления VARCHAR;
            DECLARE @БилетГородПрибытия VARCHAR;
            DECLARE @БилетДатаОтправления VARCHAR;
            DECLARE @БилетДатаПрибытия VARCHAR;

            DECLARE @ОбратныйБилетГородОтправления VARCHAR;
            DECLARE @ОбратныйБилетГородПрибытия VARCHAR;
            DECLARE @ОбратныйБилетДатаОтправления VARCHAR;
            DECLARE @ОбратныйБилетДатаПрибытия VARCHAR;

            SELECT @БилетГородОтправления = Р.ИдентификаторГородаОтправления,
                   @БилетГородПрибытия = Р.ИдентификаторГородаПрибытия,
                   @БилетДатаОтправления = Р.ВремяОтправления,
                   @БилетДатаПрибытия = Р.ВремяПрибытия
            FROM Билеты Б
                     JOIN Рейсы Р on Р.ИдентификаторРейса = Б.ИдентификаторРейса
            WHERE ИдентификаторБилета = @Билет

            SELECT @ОбратныйБилетГородОтправления = Р.ИдентификаторГородаОтправления,
                   @ОбратныйБилетГородПрибытия = Р.ИдентификаторГородаПрибытия,
                   @ОбратныйБилетДатаОтправления = Р.ВремяОтправления,
                   @ОбратныйБилетДатаПрибытия = Р.ВремяПрибытия
            FROM Билеты Б
                     JOIN Рейсы Р on Р.ИдентификаторРейса = Б.ИдентификаторРейса
            WHERE ИдентификаторБилета = @ОбратныйБилет

            IF @БилетГородОтправления != @ОбратныйБилетГородПрибытия AND
               @БилетГородПрибытия != @ОбратныйБилетГородОтправления
                BEGIN
                    RAISERROR (N'Город отправленя обратного билета должен совпадать с городом прибытия билета. Город прибытия обратного билета должен совпадать с городом отправления основного билета', 16, 1)
                    ROLLBACK TRANSACTION
                    RETURN
                END

            IF @БилетДатаПрибытия > @ОбратныйБилетДатаОтправления
                BEGIN
                    RAISERROR (N'Дата отправления обратного билета не модет быть ранее даты прибытия основного билета', 16, 1)
                    ROLLBACK TRANSACTION
                    RETURN
                END

            UPDATE Билеты
            SET ИдентификаторПассажира = @Пассажир,
                ДатаБронирования       = @БилетЗабронирован,
                ДатаПокупки            = @БилетКуплен
            WHERE ИдентификаторБилета = @ОбратныйБилет
        END

    UPDATE Билеты
    SET ДатаБронирования           = @БилетЗабронирован,
        ДатаПокупки                = @БилетКуплен,
        ИдентификаторПассажира     = @Пассажир,
        ИдентификаторОбратныйБилет = @ОбратныйБилет
    WHERE ИдентификаторБилета = @Билет
END
GO

